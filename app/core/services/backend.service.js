"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var kinvey_nativescript_sdk_1 = require("kinvey-nativescript-sdk");
var config_1 = require("../../core/config");
var BackendService = /** @class */ (function () {
    function BackendService() {
        kinvey_nativescript_sdk_1.Kinvey.init(config_1.config.backendConfig);
    }
    BackendService.prototype.setLoggedInChangedObservable = function (value) {
        this.loggedInChangedObservable = value;
    };
    BackendService.prototype.login = function (username, password) {
        return kinvey_nativescript_sdk_1.Kinvey.User.login(username, password);
    };
    BackendService.prototype.loginWithMIC = function (redirectUri, authorizationGrant, options) {
        return kinvey_nativescript_sdk_1.Kinvey.User.loginWithMIC(redirectUri, authorizationGrant, options);
    };
    BackendService.prototype.logout = function () {
        return kinvey_nativescript_sdk_1.Kinvey.User.logout();
    };
    BackendService.prototype.signup = function (username, password) {
        return kinvey_nativescript_sdk_1.Kinvey.User.signup({ username: username, password: password });
    };
    BackendService.prototype.getActiveUser = function () {
        return kinvey_nativescript_sdk_1.Kinvey.User.getActiveUser();
    };
    BackendService.prototype.resetPassword = function (email, options) {
        return kinvey_nativescript_sdk_1.Kinvey.User.resetPassword(email, options);
    };
    BackendService.prototype.save = function (collectionName, item, dataStoreType, options) {
        return kinvey_nativescript_sdk_1.Kinvey.DataStore.collection(collectionName, dataStoreType).save(item, options);
    };
    BackendService.prototype.find = function (collectionName, dataStoreType, query, options) {
        var observableResult = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection(collectionName, dataStoreType).find(query, options);
        return this.updateOnLoggedInChanged(observableResult);
    };
    BackendService.prototype.findById = function (collectionName, id, dataStoreType, options) {
        var observableResult = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection(collectionName, dataStoreType).findById(id, options);
        return this.updateOnLoggedInChanged(observableResult);
    };
    BackendService.prototype.updateOnLoggedInChanged = function (observable) {
        var _this = this;
        return this.loggedInChangedObservable.pipe(operators_1.flatMap(function (isLoggedIn) { return isLoggedIn ? _this.cacheLast(observable) : rxjs_1.of(null); }));
    };
    BackendService.prototype.cacheLast = function (observable) {
        return observable.pipe(operators_1.catchError(function (e) {
            console.error(e.toString());
            return rxjs_1.of(null);
        }), operators_1.last(function (value) { return !!value; }), operators_1.shareReplay(1));
    };
    BackendService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], BackendService);
    return BackendService;
}());
exports.BackendService = BackendService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFja2VuZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLDZCQUFzQztBQUN0Qyw0Q0FBZ0Y7QUFDaEYsbUVBQWlEO0FBQ2pELDRDQUEyQztBQUczQztJQUdJO1FBQ0ksZ0NBQU0sQ0FBQyxJQUFJLENBQXNCLGVBQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQscURBQTRCLEdBQTVCLFVBQTZCLEtBQTBCO1FBQ25ELElBQUksQ0FBQyx5QkFBeUIsR0FBRyxLQUFLLENBQUM7SUFDM0MsQ0FBQztJQUVELDhCQUFLLEdBQUwsVUFBTSxRQUFnQixFQUFFLFFBQWdCO1FBQ3BDLE9BQU8sZ0NBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQscUNBQVksR0FBWixVQUFhLFdBQW1CLEVBQUUsa0JBQThDLEVBQUUsT0FBK0I7UUFDN0csT0FBTyxnQ0FBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCwrQkFBTSxHQUFOO1FBQ0ksT0FBTyxnQ0FBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsK0JBQU0sR0FBTixVQUFPLFFBQWdCLEVBQUUsUUFBZ0I7UUFDckMsT0FBTyxnQ0FBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxRQUFRLFVBQUEsRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELHNDQUFhLEdBQWI7UUFDSSxPQUFPLGdDQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxzQ0FBYSxHQUFiLFVBQWMsS0FBYSxFQUFFLE9BQStCO1FBQ3hELE9BQU8sZ0NBQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsNkJBQUksR0FBSixVQUFLLGNBQXNCLEVBQUUsSUFBUyxFQUFFLGFBQW9DLEVBQUUsT0FBK0I7UUFDekcsT0FBTyxnQ0FBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQUVELDZCQUFJLEdBQUosVUFBSyxjQUFzQixFQUFFLGFBQW9DLEVBQUUsS0FBb0IsRUFBRSxPQUErQjtRQUNwSCxJQUFNLGdCQUFnQixHQUFHLGdDQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6RyxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxpQ0FBUSxHQUFSLFVBQVMsY0FBc0IsRUFBRSxFQUFVLEVBQUUsYUFBb0MsRUFBRSxPQUErQjtRQUM5RyxJQUFNLGdCQUFnQixHQUFHLGdDQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMxRyxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTyxnREFBdUIsR0FBL0IsVUFBZ0MsVUFBMkI7UUFBM0QsaUJBSUM7UUFIRyxPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQ3RDLG1CQUFPLENBQUMsVUFBQyxVQUFVLElBQUssT0FBQSxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQUUsQ0FBQyxJQUFJLENBQUMsRUFBbEQsQ0FBa0QsQ0FBQyxDQUM5RSxDQUFDO0lBQ04sQ0FBQztJQUVPLGtDQUFTLEdBQWpCLFVBQWtCLFVBQTJCO1FBQ3pDLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FDbEIsc0JBQVUsQ0FBQyxVQUFBLENBQUM7WUFDUixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLE9BQU8sU0FBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxFQUNGLGdCQUFJLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxDQUFDLENBQUMsS0FBSyxFQUFQLENBQU8sQ0FBQyxFQUN0Qix1QkFBVyxDQUFDLENBQUMsQ0FBQyxDQUNqQixDQUFDO0lBQ04sQ0FBQztJQWhFUSxjQUFjO1FBRDFCLGlCQUFVLEVBQUU7O09BQ0EsY0FBYyxDQWlFMUI7SUFBRCxxQkFBQztDQUFBLEFBakVELElBaUVDO0FBakVZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBmaWx0ZXIsIGZsYXRNYXAsIGxhc3QsIGNhdGNoRXJyb3IsIHNoYXJlUmVwbGF5IH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBLaW52ZXkgfSBmcm9tIFwia2ludmV5LW5hdGl2ZXNjcmlwdC1zZGtcIjtcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gXCIuLi8uLi9jb3JlL2NvbmZpZ1wiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmFja2VuZFNlcnZpY2Uge1xuICAgIHByaXZhdGUgbG9nZ2VkSW5DaGFuZ2VkT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgS2ludmV5LmluaXQoPEtpbnZleS5DbGllbnRDb25maWc+Y29uZmlnLmJhY2tlbmRDb25maWcpO1xuICAgIH1cblxuICAgIHNldExvZ2dlZEluQ2hhbmdlZE9ic2VydmFibGUodmFsdWU6IE9ic2VydmFibGU8Ym9vbGVhbj4pIHtcbiAgICAgICAgdGhpcy5sb2dnZWRJbkNoYW5nZWRPYnNlcnZhYmxlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgbG9naW4odXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gS2ludmV5LlVzZXIubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICBsb2dpbldpdGhNSUMocmVkaXJlY3RVcmk6IHN0cmluZywgYXV0aG9yaXphdGlvbkdyYW50PzogS2ludmV5LkF1dGhvcml6YXRpb25HcmFudCwgb3B0aW9ucz86IEtpbnZleS5SZXF1ZXN0T3B0aW9ucykge1xuICAgICAgICByZXR1cm4gS2ludmV5LlVzZXIubG9naW5XaXRoTUlDKHJlZGlyZWN0VXJpLCBhdXRob3JpemF0aW9uR3JhbnQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGxvZ291dCgpIHtcbiAgICAgICAgcmV0dXJuIEtpbnZleS5Vc2VyLmxvZ291dCgpO1xuICAgIH1cblxuICAgIHNpZ251cCh1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBLaW52ZXkuVXNlci5zaWdudXAoeyB1c2VybmFtZSwgcGFzc3dvcmQgfSk7XG4gICAgfVxuXG4gICAgZ2V0QWN0aXZlVXNlcigpIHtcbiAgICAgICAgcmV0dXJuIEtpbnZleS5Vc2VyLmdldEFjdGl2ZVVzZXIoKTtcbiAgICB9XG5cbiAgICByZXNldFBhc3N3b3JkKGVtYWlsOiBzdHJpbmcsIG9wdGlvbnM/OiBLaW52ZXkuUmVxdWVzdE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIEtpbnZleS5Vc2VyLnJlc2V0UGFzc3dvcmQoZW1haWwsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHNhdmUoY29sbGVjdGlvbk5hbWU6IHN0cmluZywgaXRlbTogYW55LCBkYXRhU3RvcmVUeXBlPzogS2ludmV5LkRhdGFTdG9yZVR5cGUsIG9wdGlvbnM/OiBLaW52ZXkuUmVxdWVzdE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIEtpbnZleS5EYXRhU3RvcmUuY29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSwgZGF0YVN0b3JlVHlwZSkuc2F2ZShpdGVtLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBmaW5kKGNvbGxlY3Rpb25OYW1lOiBzdHJpbmcsIGRhdGFTdG9yZVR5cGU/OiBLaW52ZXkuRGF0YVN0b3JlVHlwZSwgcXVlcnk/OiBLaW52ZXkuUXVlcnksIG9wdGlvbnM/OiBLaW52ZXkuUmVxdWVzdE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZVJlc3VsdCA9IEtpbnZleS5EYXRhU3RvcmUuY29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSwgZGF0YVN0b3JlVHlwZSkuZmluZChxdWVyeSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU9uTG9nZ2VkSW5DaGFuZ2VkKG9ic2VydmFibGVSZXN1bHQpO1xuICAgIH1cblxuICAgIGZpbmRCeUlkKGNvbGxlY3Rpb25OYW1lOiBzdHJpbmcsIGlkOiBzdHJpbmcsIGRhdGFTdG9yZVR5cGU/OiBLaW52ZXkuRGF0YVN0b3JlVHlwZSwgb3B0aW9ucz86IEtpbnZleS5SZXF1ZXN0T3B0aW9ucykge1xuICAgICAgICBjb25zdCBvYnNlcnZhYmxlUmVzdWx0ID0gS2ludmV5LkRhdGFTdG9yZS5jb2xsZWN0aW9uKGNvbGxlY3Rpb25OYW1lLCBkYXRhU3RvcmVUeXBlKS5maW5kQnlJZChpZCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU9uTG9nZ2VkSW5DaGFuZ2VkKG9ic2VydmFibGVSZXN1bHQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlT25Mb2dnZWRJbkNoYW5nZWQob2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnk+KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvZ2dlZEluQ2hhbmdlZE9ic2VydmFibGUucGlwZShcbiAgICAgICAgICAgIGZsYXRNYXAoKGlzTG9nZ2VkSW4pID0+IGlzTG9nZ2VkSW4gPyB0aGlzLmNhY2hlTGFzdChvYnNlcnZhYmxlKSA6IG9mKG51bGwpKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhY2hlTGFzdChvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGFueT4pIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUucGlwZShcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBvZihudWxsKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbGFzdCh2YWx1ZSA9PiAhIXZhbHVlKSxcbiAgICAgICAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19